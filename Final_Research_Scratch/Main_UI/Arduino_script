
import warnings
import threading
import socket
import time
import tkinter as tk
from collections import deque

warnings.filterwarnings("ignore")

import Charger_script
import scan_rfid



Emergency_vehicle_discovered = False

def Emergency_status():
    global Emergency_vehicle_discovered
    time.sleep(10)
    
    Emergency_vehicle_discovered = False
    return 1

def read_Ard_serial():
    global Ard_serial_q
    global Ard_socks
    global cli_socks
    
    global Emergency_vehicle_discovered
    
    while True:
        msg = Ard_socks.recv(1024).decode().strip()

        # Condition 1: Check if it is an emergency message
        if "Emergency:" in msg:
            #print("EVscript: Emergency vehicle discvered")
            if Emergency_vehicle_discovered == False:
                print("EVscript: Emergency vehicle discvered")
                cli_socks.send(("wisun socket_write 4 \"" + str((str(msg) + str(" Near Node 1")) + "\"\n")).encode())
                Emergency_vehicle_status_thread = threading.Thread(target=Emergency_status)
                Emergency_vehicle_discovered = True
                Emergency_vehicle_status_thread.start()

        # Condition 2: Check if it is an EV_Bike message
        elif "EV_Bike:" in msg:
            clean_msg = msg.replace("EV_Bike: ", "")
            Ard_serial_q.append(clean_msg)
            print(clean_msg)

        # Condition 3: If anything else, just ignore it
        else:
            pass







def but_startcharge(amount,bike):
    global Ard_serial_q, Ard_socks, window, status_label
    global bike_details

    print(f"EVscript: Amount to charge for is: {amount}")
    if amount is None:
        update_status("EVscript: Error: Invalid amount. Please try again.")
        return

    # Update the UI to show charging screen
    for widget in window.winfo_children():
        widget.destroy()

    status_label = tk.Label(window, text="Charging in progress...")
    status_label.pack(pady=20)
    window.update()

    # Perform the background steps
    try:
        
        if(bike == None):
            update_status("Charging in progress..")
            window.update()
            # Call the charging function
            charging_status = charging(amount)
            
            
            # Handle the post-charging process
            if charging_status == 1:
                Ard_socks.send(b"DISCONNECT\n")
                update_status("Charging completed")
            else:
                Ard_socks.send(b"DISCONNECT\n")
                update_status("Error: Charging failed")
                
            # After showing the status, return to the scan screen
            window.after(2000, setup_scan_screen)
        else:
            
            # Find the index of the bike in the bike details list (1-based indexing)
            index = bike_details.index(bike) + 1 if bike and bike_details else 0  # Add proper handling

            # Write the Arduino indexing to the Arduino socket
            Ard_socks.send(str(index).encode())

            time.sleep(2)
            update_status("Charging in progress..")
            window.update()
    
            # Read two lines from the Arduino serial queue (peripheral name and address)
            if len(Ard_serial_q) >= 2:
                peripheral_name = Ard_serial_q.popleft().strip()
                peripheral_address = Ard_serial_q.popleft().strip()

                # Print peripheral details for reference
                print(f"EV_script: Peripheral Name: {peripheral_name}")
                print(f"EV_script: Peripheral Address: {peripheral_address}")

                # Call the charging function
                charging_status = charging(amount)

                # Handle the post-charging process
                if charging_status == 1:
                    Ard_socks.send(b"DISCONNECT\n")
                    update_status("Charging completed")
                else:
                    Ard_socks.send(b"DISCONNECT\n")
                    update_status("Error: Charging failed")

                # After showing the status, return to the scan screen
                window.after(2000, setup_scan_screen)
            else:
                Ard_socks.send(str("DISCONNECT").encode())  # In case Arduino Bluetooth is connected
                print("EV_script: Error: Not enough data in the queue to read peripheral details.")
                update_status("Error: Could not retrieve peripheral details.")
                window.after(2000, setup_scan_screen)

    except Exception as e:
        Ard_socks.send(str("DISCONNECT").encode())  # In case Arduino Bluetooth is connected
        print(f"EV_script: Error in but_startcharge: {e}")
        update_status(f"Error: {e}")
        window.after(2000, setup_scan_screen)





# Function to display bike options
def display_bike_options():
    global window, status_label
    global bike_details
    

    print("evbIKE: FINALLY")

    # Clear previous widgets except the status label
    for widget in window.winfo_children():
        widget.destroy()

    # Display bike buttons
    for bike in bike_details:
        btn = tk.Button(window, text=bike, width=20, command=lambda b=bike: get_amount(b))
        btn.pack(pady=10)

    # Back button to return to the previous screen
    back_btn = tk.Button(window, text="Back", command=setup_scan_screen)
    back_btn.pack(pady=20)


# Function to handle the scanning process
def scan_for_bikes():
    global Ard_serial_q
    global bike, bike_details
    try:
        update_status("Scanning...")

        start_time = time.time()

        while True:
            if time.time() - start_time > 5:
                update_status("Scanning failed")
                break

            if Ard_serial_q:
                line = Ard_serial_q.popleft().strip()
                print("line: " + line)

                if "Scanning for devices..." in line:
                    update_status("Scanning...")

                elif "Bikes are available to connect:" in line:
                    time.sleep(1)
                    if Ard_serial_q:
                        line = Ard_serial_q.popleft().strip()
                        print("line: " + line)
                        num_bikes = int(line.split()[0])
                        print("EV_Script: Number of bikes: ", num_bikes)
                        bike_details = []

                        for _ in range(num_bikes):
                            if Ard_serial_q:
                                bike_name = Ard_serial_q.popleft().strip()
                                bike_details.append(bike_name)

                        display_bike_options()
                        break
    except Exception as e:
        update_status("Error: ")
        print(e)




# Function to send the "SCAN" command
def send_scan_command():
    global Ard_socks
    try:
        if Ard_socks:
            Ard_socks.send(b"SCAN\n")
            threading.Thread(target=scan_for_bikes).start()
        else:
            update_status("Socket connection not available.")
    except Exception as e:
        update_status("Error: " + str(e))




